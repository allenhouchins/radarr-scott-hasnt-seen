name: Update Scott Hasn't Seen Radarr List

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering
  push:
    branches:
      - main
    paths-ignore:
      - 'scott_hasnt_seen.json' # Don't trigger on JSON updates to avoid loops

# Set permissions for the job
permissions:
  contents: write
  actions: read

jobs:
  update-list:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Install dependencies
      run: |
        cd .github/scripts
        go mod download
        go mod verify
        
    - name: Run tests
      run: |
        cd .github/scripts
        go test -v
        
    - name: Clean up any incorrectly placed files
      run: |
        # Remove any JSON/XML files that might have been created in wrong locations
        rm -f .github/scott_hasnt_seen.json
        rm -f .github/scott_hasnt_seen_*.json
        rm -f .github/scott_hasnt_seen.xml
        rm -f .github/scott_hasnt_seen_*.xml
        
    - name: Run scraper
      env:
        TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
      run: |
        cd .github/scripts
        go run main.go
        
    - name: Verify files
      run: |
        echo "Checking if scott_hasnt_seen.json was created/updated:"
        if [ -f "scott_hasnt_seen.json" ]; then
          echo "JSON file exists. Size: $(wc -l < scott_hasnt_seen.json) lines"
          echo "First few lines:"
          head -10 scott_hasnt_seen.json
        else
          echo "JSON file does not exist!"
        fi
        
        echo ""
        echo "Checking if scott_hasnt_seen.xml was created/updated:"
        if [ -f "scott_hasnt_seen.xml" ]; then
          echo "XML file exists. Size: $(wc -l < scott_hasnt_seen.xml) lines"
          echo "First few lines:"
          head -10 scott_hasnt_seen.xml
        else
          echo "XML file does not exist!"
        fi
      
    - name: Check for changes
      id: changes
      run: |
        # Debug: Show current directory and file status
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        echo ""
        echo "Git status:"
        git status
        echo ""
        
        # Check if either file was modified by the scraper
        json_changed=false
        xml_changed=false
        
        if ! git diff --quiet scott_hasnt_seen.json; then
          json_changed=true
          echo "Changes detected in scott_hasnt_seen.json"
          git diff --stat scott_hasnt_seen.json
        fi
        
        if ! git diff --quiet scott_hasnt_seen.xml; then
          xml_changed=true
          echo "Changes detected in scott_hasnt_seen.xml"
          git diff --stat scott_hasnt_seen.xml
        fi
        
        if [ "$json_changed" = true ] || [ "$xml_changed" = true ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "No changes detected in either file"
        fi
        
    - name: Commit and push changes
      if: steps.changes.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add scott_hasnt_seen.json scott_hasnt_seen.xml
        git commit -m "Update Scott Hasn't Seen list - $(date +'%Y-%m-%d')"
        # Use PAT if available, otherwise use GITHUB_TOKEN
        if [ -n "${{ secrets.PAT_TOKEN }}" ]; then
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}
        fi
        git push
        
    - name: Generate release info
      if: steps.changes.outputs.changed == 'true'
      id: release
      run: |
        TAG_NAME="latest"
        RELEASE_NAME="Scott Hasn't Seen Radarr List - Latest"
        echo "Generated tag_name: $TAG_NAME"
        echo "Generated release_name: $RELEASE_NAME"
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        
    - name: Create release if new movies found
      if: steps.changes.outputs.changed == 'true'
      run: |
        echo "About to create release with:"
        echo "  tag_name: ${{ steps.release.outputs.tag_name }}"
        echo "  name: ${{ steps.release.outputs.release_name }}"
        echo "  files: scott_hasnt_seen.json, scott_hasnt_seen.xml"
        
    - name: Create GitHub release
      if: steps.changes.outputs.changed == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release.outputs.tag_name }}
        name: ${{ steps.release.outputs.release_name }}
        body: |
          Updated Scott Hasn't Seen list with latest movies from the podcast.
          
          This list can be imported into Radarr to automatically add movies that Scott Aukerman has watched on his podcast.
          
          Available formats:
          - JSON (StevenLu Custom format)
          - RSS XML (RSS List format)
        files: scott_hasnt_seen.json, scott_hasnt_seen.xml
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 